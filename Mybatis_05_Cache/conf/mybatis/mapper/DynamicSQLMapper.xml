<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 
	1、if:判断
	2、choose(when,otherwist):分支选择，带了break的swtich-case
		如果带了id就用id查，如果来了lastName就用lastName查，只会进入其中一个
	3、trim 字符串截取(where(封装查询条件),set(封装修改条件))
	4、foreach
 -->
 
<mapper namespace="com.wx.mybatis.dao.DynamicSQLMapper">
	<!-- 查询的时候如果没有某些条件就会sql拼装出错 -->
	<!-- 1、在where后面加上1=1即可，以后的条件都and xxx
		 2、mybatis使用where标签来将所有的查询条件包括在内 mybatis就会将where标签中拼装的sql多余的and去掉
		 3、去掉的and也只能是在前面的and，后面的and去不掉
	 -->
	<select id="getEmpsByDynamicSQLIf" resultType="emp">
		select * from tbl_employee
		<where>
		<if test="id!=null">
			id=#{id}
		</if>
		<if test="lastName!=null">
			and last_name like #{lastName}
		</if>
		<if test="gender==0 or gender==1">
			and gender = #{gender}
		</if>
		<if test="email!=null and email!=''">
			and email = #{email}
		</if>
		</where>
	</select>
	
	<select id="getEmpsByDynamicSQLTrim" resultType="emp">
		select * from tbl_employee
		<!-- 
			在trim里的会拼接成满足条件的字符串
			prefix：在拼接完成的字符串前面加上前缀
			prefixOverrides：去掉整个字符串前面多余的字符
			suffix：在拼接完成的字符串后面加上后缀
			suffixOverrides：去掉整个字符串后面多余的字符
		 -->
		<trim prefix="where" prefixOverrides="" suffix="" suffixOverrides="and">
		<if test="id!=null">
			id=#{id} and
		</if>
		<if test="lastName!=null">
			last_name like #{lastName} and
		</if>
		<if test="gender==0 or gender==1">
			gender = #{gender} and
		</if>
		<if test="email!=null and email!=''">
			email = #{email}
		</if>
		</trim>
	</select>
	
	<select id="getEmpsByDynamicSQLChoose" resultType="emp">
		select * from tbl_employee
		<where>
			<choose>
				<when test="id!=null">
					id = #{id}
				</when>
				<when test="lastName!=null">
					last_name like #{lastName}
				</when>
				<when test="email!=null">
					email = #{email}
				</when>
				<otherwise>
					gender = 0
				</otherwise>
			</choose>
		</where>
	</select>
	
	<update id="updateEmp">
		<!-- update tbl_employee
		<set>
			<if test="lastName!=null">
				last_name = #{lastName},
			</if>
			
			<if test="email!=null">
				email = #{email},
			</if>
			
			<if test="gender!=null">
				gender = #{gender}
			</if>
		</set>
		where id = #{id} -->
		
		update tbl_employee
		<trim prefix="set" suffixOverrides=",">
			<if test="lastName!=null">
				last_name = #{lastName},
			</if>
			
			<if test="email!=null">
				email = #{email},
			</if>
			
			<if test="gender!=null">
				gender = #{gender}
			</if>
		</trim>
			where id = #{id}
	</update>
	
	<select id="getEmpsByForeach" resultType="emp">
		<include refid="selEmp"></include>
		where id in
		<foreach collection="list" item="item" open="(" close=")" separator=",">
			#{item}
		</foreach>
	</select>
	
	<!-- 
		_parameter:代表整个参数
		
		_databaseId:如果配置了databaseProvider标签
			_databaseId就是代表当前数据库的别名例如oracle、mysql
	 -->
	<select id="getEmpsTestInnerParameter" resultType="emp">
		<!-- bind:可以将OGNL表达式的值绑定到一个变量中，方便后来引用这个变量的值 -->
		<bind name="_lastName" value="'_'+lastName+'%'"/>
		<if test="_databaseId=='mysql'">
			select * from tbl_employee
			<if test="_parameter!=null">
				where last_name like #{_lastName}
			</if>
		</if>
		
		<if test="_databaseId=='oracle'">
			select * from tbl_employee
			<if test="_parameter!=null">
				where id = #{id}
			</if>
		</if>
	</select>
	
	<!-- 抽取可重用的sql片段，方便后面使用 
		 引用sql使用include标签
		 include还可以自定义一些property，sql标签内部就能使用自定义的属性
		 取值用${prop}
	-->
	<sql id="selEmp">
		select * from tbl_employee
	</sql>
</mapper>