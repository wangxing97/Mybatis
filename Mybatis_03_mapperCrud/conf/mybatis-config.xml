<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-config.dtd">
	<configuration>
	<!-- 
		1、mybatis可以使用propertied来引入外部properties配置文件的内容
		resource:引入类路径下的资源
		url：引入网络路径或者磁盘路径下的资源
	 -->
	
	
	<properties resource="dbconfig.properties"></properties>
	<!-- 
		2、settings包含很多重要的设置项
		setting：用来设置每一个设置项
			name：设置项名
			value：设置项取值
	 -->
	 <settings>    
        <!-- <setting name="logImpl" value="STDOUT_LOGGING" /> -->
        <!-- 开始驼峰命名法 -->
	 	<setting name="mapUnderscoreToCamelCase" value="true"/>
	 	<setting name="jdbcTypeForNull" value="NULL"/>
	 	<!-- 延迟加载 优化内存 -->
	 	<setting name="lazyLoadingEnabled" value="true"/>
	 	<setting name="aggressiveLazyLoading" value="false"/>
	 </settings>
	 <!-- 
	 	3、typeAliases 别名处理器：可以为java类型起别名  ****注意：别名不区分大小写
	 		typeAlias为某个java类型起别名
	 		type：制定要起别名的类型全类名，默认别名就是类的小写.employee
	 		alias：指定新的别名
	  -->
	  <typeAliases>
	  	 <typeAlias type="com.wx.mybatis.bean.Employee" alias="emp"/>
	  	 <typeAlias type="com.wx.mybatis.bean.Department" alias="dept"/>
	  	<!-- package:为某个包下的所有类批量起别名 
	  			name：指定包名（为当前包以及下面所有的后代包的每一个类都起一个默认别名（小写！！））
	  		
	  	-->
	  	<!-- <package name="com.wx.mybatis.bean"/> -->
	  	
	  	<!-- 批量起别名的情况下，还可以在类的上方使用@Alias("emp")类似  
	  		 建议还是使用全类名
	  	-->
	  </typeAliases>
	  
	<!-- 
		4、environments:环境们，mybatis可以配置多种环境,default指定使用某种环境，可以达到快速切换
			environment：配置一个具体的环境信息;必须有两个标签
						1.transactionManager ：事务管理器
							type：事务管理器的类型；两种取值
								1）JDBC
								2) MANAGED
								自定义事务管理器：实现TransactionFactory接口，type指定为全类名
						2.dataSource：数据源
							type：UNPOOLED | POOLED | JNDI
	 -->
	<environments default="development">
	
		<environment id="test">
			<transactionManager type="">
			</transactionManager>
			<dataSource type="">
			</dataSource>
		</environment>
		
		<environment id="development">
			<transactionManager type="JDBC" />
			<dataSource type="POOLED">
				<property name="driver" value="${jdbc.driver}" />
				<property name="url" value="${jdbc.url}" />
				<property name="username" value="${jdbc.username}" />
				<property name="password" value="${jdbc.password}" />
			</dataSource>
		</environment>
	</environments>
	
	<!-- 5、databaseIdProvider:支持多数据库厂商的 
	     type="DB_VENDOR" 厂商标示
	     MySQL,Oracle,SQL Server
	-->
	<databaseIdProvider type="DB_VENDOR">
		<!-- 为不同的数据库厂商起别名 -->
		<property name="MySQL" value="mysql"/>
		<property name="Oracle" value="oracle"/>
		<property name="SQL Server" value="sqlserver"/>
	</databaseIdProvider>
	
	<!-- 6、mappers：将sql映射注册到全局配置中 -->
	<!-- 将写好的sql映射文件一定要注册到全局配置文件中 -->
	<mappers>
		<!-- 
			mapper:注册一个sql映射
				resource：引用类路径下的sql映射文件
					mybatis/mapper/EmployeeMapper.xml
				url：引用网络路径或者磁盘路径下的sql映射文件
				
				class:注册接口
					1、有sql映射文件，映射文件名必须和接口名同名，并且放在接口同一目录下
					2、没有sql映射文件，所有的sql都是利用注解写在接口上;
					推荐：比较重要的Dao接口我们来写sql映射文件
						  简单的、不重要的的Dao接口为了开发快速使用注解
		 -->
		<mapper resource="mybatis/mapper/EmployeeMapper.xml" />
		<mapper resource="mybatis/mapper/EmployeeMapperPlus.xml" />
		<mapper resource="mybatis/mapper/DeparmentMapper.xml"/>
		<mapper class="com.wx.mybatis.dao.EmployeeMapperAnnotation"/>
		<!-- 批量注册 但是xml需要和接口放在同一个包里 -->
		<!-- <package name="com.wx.mybatis.dao"/> -->
	</mappers>
</configuration>